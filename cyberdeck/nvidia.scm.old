;;; GNU Guix --- Functional package management for GNU
;;; Copyright © 2020 Hebi Li <hebi@lihebi.com>
;;; Copyright © 2020 Malte Frank Gerdes <malte.f.gerdes@gmail.com>
;;; Copyright © 2020, 2021 Jean-Baptiste Volatier <jbv@pm.me>
;;; Copyright © 2020, 2021 Jonathan Brielmaier <jonathan.brielmaier@web.de>
;;; Copyright © 2021 Pierre Langlois <pierre.langlois@gmx.com>
;;; Copyright © 2022 Petr Hodina <phodina@protonmail.com>
;;;
;;; This file is not part of GNU Guix.
;;;
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

(define-module
  (cyberdeck packages nvidia)
  #:use-module
  (guix packages)
  #:use-module
  (guix download)
  #:use-module
  (guix git-download)
  #:use-module
  (guix utils)
  #:use-module
  ((guix licenses)
   #:prefix license-gnu:)
  #:use-module
  ((nonguix licenses)
   #:prefix license:)
  #:use-module
  (guix build gremlin)
  #:use-module
  (guix build-system linux-module)
  #:use-module
  (guix build-system copy)
  #:use-module
  (guix build-system gnu)
  #:use-module
  (guix build-system meson)
  #:use-module
  (guix build-system trivial)
  #:use-module
  (gnu packages base)
  #:use-module
  (gnu packages bash)
  #:use-module
  (gnu packages bootstrap)
  #:use-module
  (gnu packages compression)
  #:use-module
  (gnu packages docbook)
  #:use-module
  (gnu packages documentation)
  #:use-module
  (gnu packages elf)
  #:use-module
  (gnu packages freedesktop)
  #:use-module
  (gnu packages gcc)
  #:use-module
  (gnu packages gl)
  #:use-module
  (gnu packages glib)
  #:use-module
  (gnu packages graphviz)
  #:use-module
  (gnu packages gtk)
  #:use-module
  (gnu packages linux)
  #:use-module
  (gnu packages libffi)
  #:use-module
  (gnu packages m4)
  #:use-module
  (gnu packages man)
  #:use-module
  (gnu packages pcre)
  #:use-module
  (gnu packages perl)
  #:use-module
  (gnu packages pkg-config)
  #:use-module
  (gnu packages python)
  #:use-module
  (gnu packages video)
  #:use-module
  (gnu packages vulkan)
  #:use-module
  (gnu packages xorg)
  #:use-module
  (gnu packages xdisorg)
  #:use-module
  (gnu packages xml)
  #:use-module
  (gnu packages web)
  #:use-module
  (gnu packages wm)
  #:use-module
  (nongnu packages linux)
  #:use-module
  (cyberdeck packages surface-linux)
  #:use-module
  (ice-9 ftw)
  #:use-module
  (ice-9 match)
  #:use-module
  (ice-9 regex)
  #:use-module
  (ice-9 format)
  #:use-module
  (ice-9 textual-ports)
  #:use-module
  (ice-9 match)
  #:use-module
  (srfi srfi-1))

(define nvidia-version "515.48.07")
(define nvidia-source-name
  (format #f "NVIDIA-Linux-x86_64-~a" nvidia-version))

(define-public evil-nvidia-driver
  (package
   (name "nvidia-driver")
   (version nvidia-version)
   (source
    (origin
     (uri
      (format #f "https://us.download.nvidia.com/XFree86/Linux-x86_64/~a/~a.run"
              version
              (format #f "NVIDIA-Linux-x86_64-~a" version)))
     (sha256
      (base32 "1qz13bih06hg8m91alg0gsvqkhh5zkmdl4q56xv2xhqkbg6691z2"))
     (method url-fetch)
     (file-name
      (string-append "nvidia-driver-" version "-checkout"))))
   (build-system linux-module-build-system)
   (arguments
    `(#:linux ,linux-surface-5.19
      #:phases
      (modify-phases %standard-phases
        (replace 'unpack
          (lambda* (#:key inputs #:allow-other-keys)
            (let ((source (assoc-ref inputs "source")))
              (invoke "sh" source "--extract-only")
              (chdir ,nvidia-source-name)
              #t)))
        (replace 'build
          (lambda* (#:key inputs #:allow-other-keys)
            (let ((source (assoc-ref inputs "source"))
                  (linux-module-builder (assoc-ref inputs "linux-module-builder")))
              (chdir "kernel")
              (substitute* "Kbuild"
                (("/bin/sh")
                 (string-append
                  (assoc-ref inputs "bash-minimal") "/bin/sh")))
              (invoke "make"
                      "-j"
                      (string-append "SYSSRC=" linux-module-builder "/lib/modules/build")
                      "CC=gcc")
              #t)))
        (delete 'check)
        (delete 'strip)
        (add-after 'install 'install-copy
          (lambda* (#:key inputs outputs #:allow-other-keys)
            (use-modules (ice-9 ftw)
                         (ice-9 regex)
                         (ice-9 textual-ports))
            (let* ((out
                    (assoc-ref outputs "out"))
                   (libdir
                    (string-append out "/lib")))
              (chdir "..")
              (for-each (lambda (file)
                          (format #t "Copying '~a'...~%" file)
                          (install-file file libdir))
                        (scandir "."
                                 (lambda (name)
                                   (string-contains name ".so"))))
              (install-file "nvidia_drv.so"
                            (string-append libdir "/xorg/modules/drivers/"))
              (install-file
               (string-append "libglxserver_nvidia.so." ,nvidia-version)
               (string-append libdir "/xorg/modules/extensions/"))
              (mkdir-p (string-append libdir "/gbm"))
              (symlink (string-append libdir "/libnvidia-allocator.so." ,nvidia-version)
                       (string-append libdir "/gbm/nvidia-drm_gbm.so"))
              #t)))

       (add-after 'install-copy 'fix-rpath
          (lambda* (#:key inputs outputs #:allow-other-keys)
            (let*
                ((libc
                  (assoc-ref inputs "libc"))
                 (ld.so
                  (string-append libc ,(glibc-dynamic-linker)))
                 (out
                  (assoc-ref outputs "out"))
                 (bindir
                  (string-append out "/bin"))
                 (rpath
                  (string-join
                   (list "$ORIGIN"
                         (string-append out "/lib")
                         (string-append libc "/lib")
                         (string-append
                          (assoc-ref inputs "libx11")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "libxext")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "libdrm")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "pango")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "gtk+")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "gtk2")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "atk")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "glib")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "cairo")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "gdk-pixbuf")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "wayland")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "mesa")
                          "/lib")
                         (string-append
                          (assoc-ref inputs "gcc:lib")
                          "/lib"))
                   ":")))
              (define (patch-elf file)
                (format #t "Patching ~a ...~%" file)
                (unless (string-contains file ".so")
                  (invoke "patchelf" "--set-interpreter" ld.so file))
                (invoke "patchelf" "--set-rpath" rpath file))
              (for-each (lambda (file)
                          (when (elf-file? file)
                            (patch-elf file)))
                        (find-files out  ".*\\.so"))
              (patch-elf "nvidia-smi")
              (patch-elf "nvidia-persistenced")
              (patch-elf "nvidia-debugdump")
              (patch-elf "nvidia-settings")
              (patch-elf "nvidia-xconfig")
              #t)))

       (add-after 'fix-rpath 'install-json
         (lambda* (#:key inputs outputs #:allow-other-keys)
           (use-modules (ice-9 ftw)
                        (ice-9 regex)
                        (ice-9 string-fun)
                        (ice-9 textual-ports))
           (let* ((out
                   (assoc-ref outputs "out"))
                  (etcdir
                   (string-append out "/etc"))
                  (libdir
                   (string-append out "/lib")))
             (install-file "10_nvidia.json"
                           (string-append out "/share/egl/egl_vendor.d/"))
             (install-file "10_nvidia_wayland.json"
                           (string-append out "/share/egl/egl_external_platform.d/"))
             (install-file "15_nvidia_gbm.json"
                           (string-append out "/share/egl/egl_external_platform.d/"))
             (install-file "nvidia_icd.json"
                           (string-append etcdir "/vulkan/icd.d/"))
             (install-file "nvidia_layers.json"
                           (string-append etcdir "/vulkan/implicit_layer.d/"))

              (let* ((outdir (string-append out "/etc/vulkan/icd.d"))
                     (outfile (string-append outdir "/nvidia_icd.json")))
                (mkdir-p outdir)
                (call-with-output-file outfile
                  (lambda (port)
                    (put-string
                     port (call-with-input-file "nvidia_icd.json"
                            (lambda (source)
                              (string-replace-substring
                               (get-string-all source)
                               "libGLX_nvidia.so.0"
                               "libGLX_nvidia.so.0")))))))

              (let ((file
                     (string-append etcdir "/OpenCL/vendors/nvidia.icd")))
                (mkdir-p (string-append etcdir "/OpenCL/vendors/"))
                (call-with-output-file file
                  (lambda (port)
                    (display (string-append out "/lib/libnvidia-opencl.so.1") port)))
                (chmod file #o555))
              #t)))
        (add-after 'install-json 'install-udev-rules
          (lambda* (#:key inputs outputs #:allow-other-keys)
            (let*
                ((out
                  (assoc-ref outputs "out"))
                 (rulesdir
                  (string-append out "/lib/udev/rules.d/"))
                 (rules
                  (string-append out "/lib/udev/rules.d/90-nvidia.rules"))
                 (sh
                  (string-append
                   (assoc-ref inputs "bash-minimal")
                   "/bin/sh"))
                 (mknod
                  (string-append
                   (assoc-ref inputs "coreutils")
                   "/bin/mknod"))
                 (cut
                  (string-append
                   (assoc-ref inputs "coreutils")
                   "/bin/cut"))
                 (grep
                  (string-append
                   (assoc-ref inputs "grep")
                   "/bin/grep")))
              (mkdir-p rulesdir)
              (call-with-output-file rules
                (lambda (port)
                  (put-string
                   port
                   (string-append
                    "KERNEL==\"nvidia\", "
                    "RUN+=\""
                    sh " -c '"
                    mknod " -m 666 /dev/nvidiactl c $$("
                    grep " nvidia-frontend /proc/devices |"
                    cut " -d \\  -f 1) 255'\"" "\n"

                    "KERNEL==\"nvidia_modeset\", "
                    "RUN+=\""
                    sh " -c '"
                    mknod " -m 666 /dev/nvidia-modeset c $$("
                    grep " nvidia-frontend /proc/devices | "
                    cut " -d \\  -f 1) 254'\"" "\n"

                    "KERNEL==\"card*\", SUBSYSTEM==\"drm\", DRIVERS==\"nvidia\", "
                    "RUN+=\""
                    sh " -c '"
                    mknod " -m 666 /dev/nvidia0 c $$("
                    grep " nvidia-frontend /proc/devices | "
                    cut " -d \\  -f 1) 0'\"" "\n"

                    "KERNEL==\"nvidia_uvm\", "
                    "RUN+=\""
                    sh " -c '"
                    mknod " -m 666 /dev/nvidia-uvm c $$("
                    grep " nvidia-uvm /proc/devices | "
                    cut " -d \\  -f 1) 0'\"" "\n"

                    "KERNEL==\"nvidia_uvm\", "
                    "RUN+=\""
                    sh " -c '"
                    mknod " -m 666 /dev/nvidia-uvm-tools c $$("
                    grep " nvidia-uvm /proc/devices | "
                    cut " -d \\  -f 1) 0'\"" "\n"

                    "ACTION==\"bind\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x10de\", ATTR{class}==\"0x030000\", TEST==\"power/control\", ATTR{power/control}==\"auto\"\n"
                    "ACTION==\"bind\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x10de\", ATTR{class}==\"0x030200\", TEST==\"power/control\", ATTR{power/control}==\"auto\"\n"
                    "ACTION==\"unbind\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x10de\", ATTR{class}==\"0x030000\", TEST==\"power/control\", ATTR{power/control}==\"on\"\n"
                    "ACTION==\"unbind\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x10de\", ATTR{class}==\"0x030200\", TEST==\"power/control\", ATTR{power/control}==\"on\"\n"
                    ))))
              #t)))
        (add-after 'install-udev-rules 'install-tools
          (lambda* (#:key inputs outputs #:allow-other-keys)
            (let* ((out
                    (assoc-ref outputs "out"))
                   (bindir
                    (string-append out "/bin"))
                   (moddir
                    (string-append out
                                   "/lib/modules/"
                                   ,(utsname:release (uname))
                                   "-gnu/extra")))
              (mkdir-p bindir)
              (let ((file
                     (string-append bindir "/nvidia-insmod")))
                (call-with-output-file file
                  (lambda (port)
                    (put-string port (string-append "#!"
                                                    (assoc-ref inputs "bash-minimal")
                                                    "/bin/sh" "\n"
                                                    "modprobe ipmi_devintf"                   "\n"
                                                    "insmod " moddir "/nvidia.ko"         "\n"
                                                    "insmod " moddir "/nvidia-modeset.ko" "\n"
                                                    "insmod " moddir "/nvidia-uvm.ko"     "\n"
                                                    "insmod " moddir "/nvidia-drm.ko"     "\n"
                                                    "insmod " moddir "/nvidia-peermem.ko" "\n"))))
                (chmod file #o555))
              (let ((file
                     (string-append bindir "/nvidia-rmmod")))
                (call-with-output-file file
                  (lambda (port)
                    (put-string port
                                (string-append "#!"
                                               (assoc-ref inputs "bash-minimal")
                                               "/bin/sh" "\n"
                                               "rmmod " "nvidia-drm"     "\n"
                                               "rmmod " "nvidia-uvm"     "\n"
                                               "rmmod " "nvidia-modeset" "\n"
                                               "rmmod " "nvidia-peermem" "\n"
                                               "rmmod " "nvidia"         "\n"
                                               "rmmod " "ipmi_devintf"   "\n"))))
                (chmod file #o555))
              (install-file "nvidia-smi" bindir)
              (install-file "nvidia-persistenced" bindir)
              (install-file "nvidia-debugdump" bindir)
              (install-file "nvidia-settings" bindir)
              (install-file "nvidia-xconfig" bindir)
              #t)))
        (add-after 'install-tools 'install-symlinks
          (lambda* (#:key inputs outputs #:allow-other-keys)
            (let* ((out
                    (assoc-ref outputs "out"))
                   (libdir
                    (string-append out "/lib")))
              (for-each
               (lambda (file)
                 (let* ((short (regexp-substitute
                                #f
                                (string-match "([^/]*\\.so).*" file)
                                1))
                        (major (cond
                                ((or (string=? short "libGLX.so")
                                     (string=? short "libGLX_nvidia.so")
                                     (string=? short "libEGL_nvidia.so")) "0")
                                ((string=? short "libGLESv2.so") "2")
                          (else "1")))
                        (mid (string-append short "." major))
                        (short-file (string-append libdir "/" short))
                        (mid-file (string-append libdir "/" mid)))
                   ;; FIXME the same name, print out warning at least
                   ;; [X] libEGL.so.1.1.0
                   ;; [ ] libEGL.so.435.21
                   (when (not (file-exists? short-file))
                     (format #t "Linking ~a to ~a ...~%" short file)
                     (symlink (basename file) short-file))
                   (when (not (file-exists? mid-file))
                     (format #t "Linking ~a to ~a ...~%" mid file)
                     (symlink (basename file) mid-file))))
                 (find-files libdir "\\.so\\."))
              (symlink ,(string-append "libglxserver_nvidia.so." nvidia-version)
                       (string-append out "/lib/xorg/modules/extensions/" "libglxserver_nvidia.so"))
              #t))))))
   (supported-systems
    '("x86_64-linux"))
   (native-inputs
    `(("patchelf" ,patchelf)
      ("perl" ,perl)
      ("python2" ,python-2)
      ("which" ,which)
      ("xz" ,xz)))
   (inputs
    `(("atk" ,atk)
      ("bash-minimal" ,bash-minimal)
      ("cairo" ,cairo)
      ("coreutils" ,coreutils)
      ("gcc:lib" ,gcc "lib")
      ("gdk-pixbuf" ,gdk-pixbuf)
      ("glib" ,glib)
      ("grep" ,grep)
      ("gtk+" ,gtk+)
      ("gtk2" ,gtk+-2)
      ("kmod" ,kmod)
      ("glibc" ,glibc)
      ("libdrm" ,libdrm)
      ("libx11" ,libx11)
      ("libxext" ,libxext)
      ("linux" ,linux-lts)
      ("mesa" ,mesa)
      ("wayland" ,wayland)))
   (home-page "https://www.nvidia.com")
   (synopsis "Proprietary Nvidia driver")
   (description "This is the evil Nvidia driver.  Don't forget to add
nvidia-driver to the udev-rules in your config.scm:
@code{(simple-service 'custom-udev-rules udev-service-type (list nvidia-driver))}
Further xorg should be configured by adding:
@code{(modules (cons* nvidia-driver %default-xorg-modules))
(drivers '(\"nvidia\"))} to @code{xorg-configuration}.")
   (license
    (license:nonfree
     (format #f "file:///share/doc/nvidia-driver-~a/LICENSE" version)))))

(define-public nvda
  (package
    (inherit nvidia-driver)
    (name "n")
    (source #f)
    (build-system trivial-build-system)
    (arguments
     '(#:modules ((guix build union))
       #:builder (begin
                   (use-modules (guix build union)
                                (srfi srfi-1)
                                (ice-9 regex))
                   (union-build (assoc-ref %outputs "out")
                                (list (assoc-ref %build-inputs "mesa") (assoc-ref %build-inputs "nvidia-driver"))
                                #:resolve-collision (lambda (files) (let ((file
                                                                      (if (string-match "nvidia-driver" (first files))
                                                                          (first files)
                                                                          (last files))))
                                                                 (format #t "chosen ~a ~%" file)
                                                                 file)))
                   #t)))
  (description "These are the libraries of the evil Nvidia driver,
packaged in such a way that you can use the transformation option
@code{--with=graft=mesa=nvda} to use the nvidia driver with a package that reqires mesa.")
  (inputs
   `(("nvidia-driver" ,nvidia-driver)
     ("mesa" ,mesa)))
  (outputs '("out"))))

(define mesa/fake
  (package
    (inherit mesa)
    (replacement n)))

(define-public replace-mesa
  (package-input-rewriting `((,mesa . ,mesa/fake))))

(define-public wayland
  (package
   (name "wayland")
   (version "1.20.0")
   (source
    (origin
     (method url-fetch)
     (uri
      (string-append "https://wayland.freedesktop.org/releases/"
                     name "-" version ".tar.xz"))
     (sha256
      (base32
       "09c7rpbwavjg4y16mrfa57gk5ix6rnzpvlnv1wp7fnbh9hak985q"))))
   (build-system meson-build-system)
   (outputs
    '("out" "doc"))
   (arguments
    `(#:parallel-tests? #f
      #:phases
      (modify-phases
       %standard-phases
       (add-after 'unpack 'patch-docbook-xml
                  (lambda*
                      (#:key native-inputs inputs #:allow-other-keys)
                    (with-directory-excursion
                     "doc"
                     (substitute*
                      (find-files "." "\\.xml$")
                      (("http://www.oasis-open.org/docbook/xml/4\\.5/")
                       (string-append
                        (assoc-ref
                         (or native-inputs inputs)
                         "docbook-xml")
                        "/xml/dtd/docbook/"))
                      (("http://www.oasis-open.org/docbook/xml/4\\.2/")
                       (string-append
                        (assoc-ref
                         (or native-inputs inputs)
                         "docbook-xml-4.2")
                        "/xml/dtd/docbook/"))))))
       (add-after 'install 'move-doc
                  (lambda*
                      (#:key outputs #:allow-other-keys)
                    (let*
                        ((out
                          (assoc-ref outputs "out"))
                         (doc
                          (assoc-ref outputs "doc")))
                      (mkdir-p
                       (string-append doc "/share"))
                      (rename-file
                       (string-append out "/share/doc")
                       (string-append doc "/share/doc"))))))))
   (native-inputs
    `(("docbook-xml-4.2" ,docbook-xml-4.2)
      ("docbook-xml" ,docbook-xml)
      ("docbook-xsl" ,docbook-xsl)
      ("dot" ,graphviz)
      ("doxygen" ,doxygen)
      ("pkg-config" ,pkg-config)
      ("python" ,python)
      ("xmlto" ,xmlto)
      ("xsltproc" ,libxslt)
      ,@(if
         (%current-target-system)
         `(("pkg-config-for-build" ,pkg-config-for-build)
           ("wayland" ,this-package))
                                        ; for wayland-scanner
         '())))
   (inputs
    (list expat libxml2))
                                        ; for XML_CATALOG_FILES
   (propagated-inputs
    (list libffi))
   (home-page "https://wayland.freedesktop.org/")
   (synopsis "Core Wayland window system code and protocol")
   (description "Wayland is a project to define a protocol for a compositor to
talk to its clients as well as a library implementation of the protocol.  The
compositor can be a standalone display server running on Linux kernel
modesetting and evdev input devices, an X application, or a wayland client
itself.  The clients can be traditional applications, X servers (rootless or
fullscreen) or other display servers.")
   (license license-gnu:expat)))


(define-public wayland-protocols
  (package
   (name "wayland-protocols")
   (version "1.20.0")
   (source
    (origin
     (method url-fetch)
     (uri
      (string-append
       "https://wayland.freedesktop.org/releases/"
       "wayland-protocols-" version ".tar.xz"))
     (sha256
      (base32
       "0q0laxdvf8p8b7ks2cbpqf6q0rwrjycqrp8pf8rxm86hk5qhzzzi"))))
   (build-system meson-build-system)
   (inputs
    (list wayland))
   (native-inputs
    (list pkg-config python))
   (synopsis "Wayland protocols")
   (description "Wayland-Protocols contains Wayland protocols that add
functionality not available in the Wayland core protocol.  Such protocols either
add completely new functionality, or extend the functionality of some other
protocol either in Wayland core, or some other protocol in wayland-protocols.")
   (home-page "https://wayland.freedesktop.org")
   (license license-gnu:expat)))

(define-public libdrm
  (package
   (name "libdrm")
   (version "2.4.110")
   (source
    (origin
     (method url-fetch)
     (uri
      (string-append
       "https://dri.freedesktop.org/libdrm/libdrm-"
       version ".tar.xz"))
     (sha256
      (base32
       "0dwpry9m5l27dlhq48j4bsiqwm0247cxdqwv3b7ddmkynk2f9kpf"))))
   (build-system meson-build-system)
   (arguments
    `(#:configure-flags
      '(,@(match
              (%current-system)
            ((or "armhf-linux" "aarch64-linux")
             '("-Dexynos=true"
               "-Domap=true"
               "-Detnaviv=true"
               "-Dtegra=true"
               "-Dfreedreno-kgsl=true"))
            (_
             '())))
      #:phases
      (modify-phases
       %standard-phases
       (replace 'check
                (lambda*
                    (#:key tests? #:allow-other-keys)
                  (when tests?
                    (invoke "meson" "test" "--timeout-multiplier" "5")))))))
   (propagated-inputs
    (list libpciaccess))
   (native-inputs
    (list pkg-config))
   (home-page "https://dri.freedesktop.org/wiki/")
   (synopsis "Direct rendering userspace library")
   (description "The Direct Rendering Infrastructure, also known as the DRI,
is a framework for allowing direct access to graphics hardware under the
X Window System in a safe and efficient manner.  It includes changes to the
X server, to several client libraries, and to the kernel (DRM, Direct
Rendering Manager).  The most important use for the DRI is to create fast
OpenGL implementations providing hardware acceleration for Mesa.
Several 3D accelerated drivers have been written to the DRI specification,
including drivers for chipsets produced by 3DFX, AMD (formerly ATI), Intel
and Matrox.")
   (license license-gnu:x11)))

(define-public wlroots-eglstreams
  (package
   (name "wlroots-eglstreams")
   (version "0.16.0")
   (source
    (origin
     (method git-fetch)
     (uri
      (git-reference
       (url "https://github.com/danvd/wlroots-eglstreams")
       (commit "master")))
     (file-name
      (git-file-name name version))
     (sha256
      (base32 "0m4x63wnh7jnr0i1nhs221c0d8diyf043hhx0spfja6bc549bdxr"))))
   (build-system meson-build-system)
   (arguments
    `(#:phases
      (modify-phases
       %standard-phases
       (add-before 'configure 'hardcode-paths
                   (lambda*
                       (#:key inputs #:allow-other-keys)
                     (substitute*
                      "xwayland/server.c"
                      (("Xwayland")
                       (string-append
                        (assoc-ref inputs "xorg-server-xwayland")
                        "/bin/Xwayland")))
                     #t))
       (add-before 'shrink-runpath 'add-nvda-to-runpath
         (lambda* (#:key inputs outputs #:allow-other-keys)
           (use-modules (guix build gremlin))
           (let* ((out (assoc-ref outputs "out"))
                  (nvda (assoc-ref inputs "nvda"))
                  (wlr (string-append out "/lib/libwlroots.so"))
                  (nvdalib (string-append nvda "/lib"))
                  (rpath (file-runpath wlr)))
             (invoke "patchelf"
                     "--set-rpath" (string-join (cons nvdalib rpath) ":")
                     wlr)))))))
   (propagated-inputs
    (list ;; As required by wlroots.pc.
     eudev
     libdrm
     libinput
     libx11
     libxcb
     libxext
     libxfixes
     libxkbcommon
     libxxf86vm
     glslang
     nvda
     pixman
     seatd
     wayland
     wayland-protocols
     vulkan-headers
     vulkan-loader
     xcb-util-errors
     xcb-util-renderutil
     xcb-util-wm
     xorg-server-xwayland))
   (native-inputs
    (list patchelf pkg-config))
   (home-page "https://github.com/danvd/wlroots-eglstreams")
   (synopsis "Pluggable, composable, unopinionated modules for building a
Wayland compositor")
   (description "wlroots is a set of pluggable, composable, unopinionated
modules for building a Wayland compositor.")
   (license license-gnu:expat)))  ; MIT license

(define-public sway-nvidia
  (package
   (name "sway-nvidia")
   (version "1.8-dev")
   (source
    (origin
     (method git-fetch)
     (uri
      (git-reference
       (url "https://github.com/swaywm/sway")
       (commit "9a6687ee04db948a9f61cf2f4cc5966be84c822c")))
     (file-name
      (git-file-name name version))
     (sha256
      (base32 "0vn8r30sidjn99h0l9h7wzh3cr09ivn7f79qxii21vfcjdp5nv1m"))))
   (build-system meson-build-system)
   (arguments
    `(#:phases
      (modify-phases
       %standard-phases
       (add-before 'configure 'hardcode-paths
                   (lambda*
                       (#:key inputs #:allow-other-keys)
                     ;; Hardcode path to swaybg.
                     (substitute*
                      "sway/config.c"
                      (("strdup..swaybg..")
                       (string-append "strdup(\""
                                      (assoc-ref inputs "swaybg")
                                      "/bin/swaybg\")")))
                     ;; Hardcode path to scdoc.
                     (substitute*
                      "meson.build"
                      (("scdoc.get_pkgconfig_variable..scdoc..")
                       (string-append "'"
                                      (assoc-ref inputs "scdoc")
                                      "/bin/scdoc'")))
                     #t))
      (add-before 'shrink-runpath 'add-nvda-to-runpath
         (lambda* (#:key inputs outputs #:allow-other-keys)
           (use-modules (guix build gremlin))
           (let* ((out (assoc-ref outputs "out"))
                  (nvda (assoc-ref inputs "nvda"))
                  (sway (string-append out "/bin/sway"))
                  (swaybar (string-append out "/bin/swaybar"))
                  (swaymsg (string-append out "/bin/swaymsg"))
                  (swaynag (string-append out "/bin/swaynag"))
                  (nvdalib (string-append nvda "/lib")))
             (invoke "patchelf"
                     "--set-rpath" (string-join (cons nvdalib (file-runpath sway)) ":")
                     sway)
             (invoke "patchelf"
                     "--set-rpath" (string-join (cons nvdalib (file-runpath swaybar)) ":")
                     swaybar)
             (invoke "patchelf"
                     "--set-rpath" (string-join (cons nvdalib (file-runpath swaymsg)) ":")
                     swaymsg)
             (invoke "patchelf"
                     "--set-rpath" (string-join (cons nvdalib (file-runpath swaynag)) ":")
                     swaynag)))))))
   (inputs
    (list cairo
          elogind
          gdk-pixbuf
          json-c
          libdrm
          libevdev
          libinput
          libxkbcommon
          pcre2
          pango
          pixman
          swaybg
          wayland
          wayland-protocols
          wlroots-eglstreams))
   (native-inputs
    (list linux-pam patchelf pkg-config scdoc wayland-protocols))
   (home-page "https://github.com/swaywm/sway")
   (synopsis "Wayland compositor compatible with i3")
   (description "Sway is a i3-compatible Wayland compositor.")
   (license license-gnu:expat)))
